version: 2.1

jobs:
  build_and_deploy:
    machine: true  # Dockerをフルにサポートするためにmachine executorを使用
    steps:
      - checkout

      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

      - run:
          name: Deploy to EC2 via SSH
          command: |
            ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST \<< 'EOF'
              DEPLOY_DIR=/home/ec2-user/app

              # デプロイ先ディレクトリが存在しない場合は作成
              if [ ! -d "$DEPLOY_DIR" ]; then
                echo "Creating deploy directory at $DEPLOY_DIR"
                mkdir -p $DEPLOY_DIR
              fi

              # デプロイ先ディレクトリに移動
              cd $DEPLOY_DIR

              # 初回デプロイかどうかを確認
              if [ ! -f .deployed ]; then
                echo "First deployment: Performing full setup."

                # ディレクトリをクリーンアップ（必要に応じて）
                echo "Cleaning up $DEPLOY_DIR directory..."
                rm -rf $DEPLOY_DIR/* /home/ec2-user/app/.[!.]*

                # リポジトリをカレントディレクトリにクローン
                git clone https://github.com/Y0r-K8m3-learning/advanced-project-flea.git .
                
                sudo chmod 777 -R *

                # Docker コンテナをビルドして起動
                sudo docker-compose up -d --build || { echo "Docker Compose failed"; exit 1; }
                
                sudo chmod 777 -R *

                # Composer 依存関係をインストール
                sudo docker-compose exec -w /var/www php bash -c "composer install" || { echo "Composer install failed"; exit 1; }

                # .env ファイルをコピー（存在しない場合のみ）
                sudo docker-compose exec  -w /var/www php bash -c 'if [ ! -f .env ]; then cp -p .env.example .env; fi' || { echo ".env copy failed"; exit 1; }

                # Laravel アプリケーションキーを生成
                sudo docker-compose exec  -w /var/www php bash -c "php artisan key:generate" || { echo "Laravel key generation failed"; exit 1; }

                # MySQLコンテナを再起動
                sudo docker-compose restart mysql || { echo "MySQL restart failed"; exit 1; }

                # MySQLが起動するまで待機（最大10秒）
                echo "Waiting for MySQL to be ready..."
                for i in {1..10}; do
                  sudo docker-compose exec mysql mysqladmin ping -h "localhost" --silent && break
                  echo "MySQL is not ready yet. Waiting..."
                  sleep 1
                done

                if [ $i -eq 10 ]; then
                  echo "MySQL did not become ready within 10 seconds."
                  exit 1
                fi

                echo "MySQL is ready."

                # データベースマイグレーションとシーディングを実行
                sudo docker-compose exec  -w /var/www php bash -c "php artisan migrate --force" || { echo "Migration failed"; exit 1; }
                sudo docker-compose exec  -w /var/www php bash -c "php artisan db:seed --force" || { echo "Seeding failed"; exit 1; }

                # NPM依存関係をインストールしてビルド
                sudo docker-compose exec php bash -c "npm install" || { echo "NPM install failed"; exit 1; }
                sudo docker-compose exec php bash -c "npm run build" || { echo "NPM build failed"; exit 1; }

                # PM2 のインストール（未インストールの場合）
                if ! command -v pm2 &> /dev/null; then
                  echo "PM2 not found. Installing PM2..."
                  curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash -
                  sudo yum install -y nodejs
                  sudo npm install -g pm2 || { echo "PM2 install failed"; exit 1; }
                else
                  echo "PM2 is already installed."
                fi

                # アプリケーションを PM2 で再起動
                pm2 restart all || { echo "PM2 restart failed"; exit 1; }

                # デプロイ完了フラグを作成
                touch .deployed
              else
                echo "Subsequent deployment: Pulling latest changes and updating."

                # 最新の変更をプル
                git pull origin main || { echo "Git pull failed"; exit 1; }

                # Docker コンテナを再ビルドして起動
                sudo docker-compose up -d --build || { echo "Docker Compose failed"; exit 1; }

                echo "####docker-build."
                # Composer 依存関係をインストール
                sudo docker-compose exec -w /var/www/app php bash -c "composer install" || { echo "Composer install failed"; exit 1; }

                # MySQLコンテナを再起動
                docker-compose restart mysql || { echo "MySQL restart failed"; exit 1; }

                # MySQLが起動するまで待機（最大10秒）
                echo "Waiting for MySQL to be ready..."
                for i in {1..10}; do
                  docker-compose exec mysql mysqladmin ping -h "localhost" --silent && break
                  echo "MySQL is not ready yet. Waiting..."
                  sleep 1
                done

                if [ $i -eq 10 ]; then
                  echo "MySQL did not become ready within 10 seconds."
                  exit 1
                fi

                echo "MySQL is ready."

                # データベースマイグレーションとシーディングを実行
                sudo docker-compose exec -w /var/www/app php bash -c "php artisan migrate --force" || { echo "Migration failed"; exit 1; }
                sudo docker-compose exec -w /var/www/app php bash -c "php artisan db:seed --force" || { echo "Seeding failed"; exit 1; }

                # NPM依存関係をインストールしてビルド
                docker-compose exec -w /var/www/app php bash -c "npm install" || { echo "NPM install failed"; exit 1; }
                docker-compose exec -w /var/www/app php bash -c "npm run build" || { echo "NPM build failed"; exit 1; }

                # アプリケーションを PM2 で再起動
                pm2 restart all || { echo "PM2 restart failed"; exit 1; }



              fi

                            # === PHP Unit テストの開始 ===
              echo "PHP Unit テストを実行中..."

              # PHPコンテナ内でPHPUnitテストを実行
              docker-compose exec php bash -c "vendor/bin/phpunit" || { echo "PHP Unit テストに失敗しました"; exit 1; }

              echo "PHP Unit テストが正常に完了しました。"
              # === PHP Unit テストの終了 ===

            EOF

workflows:
  build_and_deploy:
    jobs:
      - build_and_deploy


